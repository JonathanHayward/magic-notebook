#!/bin/sh
#\
exec tclsh "$0" ${1+"$@"}

#
# Magic Notebook/Sidebar in a Can/Snippets upgrade script
#

proc addTrailingSlash {path} {
	if {[regexp "/$" $path]} {
		return $path
	} else {
		return "$path/"
	}
}

proc getValue {default} {
	puts -nonewline " \[$default\]: "
	flush stdout
	set response [gets stdin]
	if {$response == ""} {
		return $default
	} else {
		return $response
	}
}

proc init {} {
	global absoluteSnippetsDocumentRoot
	global absoluteSnippetsPath
	global documentURL
	global filePrefix
	global fullBaseURL
	global fullProgramName
	global fullTclPath
	global programMode
	global shouldReplaceBackground
	global shouldUpdateHTML
	global shouldUpdatePrivacyPolicy
	#set programMode "sidebar"
	set programMode "MagicNotebook"
	set documentURL "/$programMode/"
	set fullBaseURL "http://[exec hostname]/cgi-bin/$programMode"
	#set fullProgramName "Sidebar in a Can"
	set fullProgramName "Magic Notebook"
	#set absoluteSnippetsPath "/usr/pkg/libexec/cgi-bin/$programMode"
	set absoluteSnippetsPath "/var/www/cgi-bin/$programMode"
	set absoluteSnippetsDocumentRoot "/var/www/html/$programMode/"
	#set filePrefix "/usr/pkg/share/httpd/$programMode/"
	set filePrefix "/usr/lib/$programMode/"
	#set fullTclPath "/usr/pkg/bin/tclsh"
	set fullTclPath "/usr/bin/tclsh"
	set shouldReplaceBackground "yes"
	set shouldUpdateHTML "yes"
	set shouldUpdatePrivacyPolicy "yes"
	puts -nonewline "[exec clear]"
	puts -nonewline\
"You are beginning the $fullProgramName UPGRADE script.  This script will ask\
\nyou a few questions in order to set up the script.  If you don't know an\
\nappropriate answer to one of the questions, and don't want to use this\
\nscript's guess, you can quit at any time and restart the script when you\
\nknow how to answer the questions. The script will ask you all informational\
\nquestions before making any changes.\
\n\
\nQuestions asked are typical of a traditional Unix/Linux interactive\
\ninstallation script.  The installer is encouraged to have at least two\
\nwindows open during installation: one for this script, and one to poke\
\npoke around on the system and find appropriate answers to script questions.\
\n\
\nHit return to continue..."
gets stdin
}

# Not indented, because of spacing concerns.
proc interview {} {
global absoluteSnippetsDocumentRoot
global absoluteSnippetsPath
global documentURL
global filePrefix
global fullBaseURL
global fullProgramName
global fullTclPath
global programMode
global shouldReplaceBackground
global shouldUpdateHTML
global shouldUpdatePrivacyPolicy

puts -nonewline "\
\nWhat is the full path to the Tcl executable (usually tclsh)?\
\n\
\nTcl path:"
set fullTclPath [getValue $fullTclPath]
puts -nonewline "\
\nWhat absolute path is $fullProgramName currently stored at? (Include the\
\nfilename: /path/$programMode, not /path/.)\
\n\
\nAbsolute path"
set absoluteSnippetsPath [getValue $absoluteSnippetsPath]
puts -nonewline "\
\nWhat absolute path--on your filesystem, not on the web--do you have public\
$fullProgramName web documents stored in?\
\n\
\n$fullProgramName public HTML directory"
set absoluteSnippetsDocumentRoot [getValue $absoluteSnippetsDocumentRoot]
puts -nonewline "\
\nWhat is the full, publicly stated URL for your $fullProgramName script?\
\n\
\nFull base URL"
set fullBaseURL [getValue $fullBaseURL]
puts -nonewline "\
\nWhat URL are $fullProgramName documents stored at?\
\n\
\nDocument URL"
set documentURL [getValue $documentURL]
puts -nonewline\
"\nWhat is the private $fullProgramName data directory?\
\n\
\nPrivate data directory"
set filePrefix [getValue $filePrefix]
puts -nonewline "\
\nThe current version of the Magic Notebook includes a relatively new\
\nbackground meant to be easier on the eyes and easier to read. Would you like\
\nto replace your current background with the relatively new background?\
\n\
\nReplace background (yes/no)"
set shouldReplaceBackground [getValue $shouldReplaceBackground]
puts -nonewline\
"\nAs of a recent version beginning and end of pages have been changed\
\nslightly to use CSS. Updating them will make the pages look nicer, but\
\nWILL OVERWRITE any customizations you made to the beginning and end of\
\npages.\
\n\
\nWould you like to use the updated HTML (yes/no)"
set shouldUpdateHTML [getValue $shouldUpdateHTML]
puts -nonewline\
"\nThe old privacy policy page was not up to date. If you have not written\
\nyour own privacy policy, I suggest that you replace the privacy policy with\
\nthe (relatively) new one.\
\n\
\nWould you like to use the improved privacy policy (yes/no)"
set shouldUpdatePrivacyPolicy [getValue $shouldUpdatePrivacyPolicy]
puts -nonewline "\
\nYou have selected the following options:\
\n"
puts -nonewline\
"\n\tAbsolute path to script: $absoluteSnippetsPath"
puts -nonewline\
"\n\tDocument URL: $documentURL"
puts -nonewline\
"\n\tFull path to Tcl: $fullTclPath"
puts -nonewline\
"\n\tFull base URL: $fullBaseURL"
puts -nonewline\
"\n\tPublic HTML directory: $absoluteSnippetsDocumentRoot"
puts -nonewline\
"\n\tPrivate $programMode data directory: $filePrefix"
puts -nonewline\
"\n\tShould background be changed: $shouldReplaceBackground"
puts -nonewline\
"\n\tShould HTML be changed: $shouldUpdateHTML"
puts -nonewline\
"\n\tShould privacy policy be changed: $shouldUpdatePrivacyPolicy"
puts -nonewline "\n\
\nAre these options all correct (yes/no)"
if {[isTrue [getValue "yes"]]} {
return 1
} else {
puts -nonewline "\
\nWould you rather change your answers or quit for now (change/quit)"
set response [getValue change]
if {[regexp -nocase "^c" $response]} {
puts -nonewline "\
\nI'll ask you the same questions again.  If you want to keep your answer the\
\nsame, just hit enter.\
\n"
return [interview]
} else {
puts -nonewline "Bye! You can always upgrade $fullProgramName at a later time.\n"
exit 0
}
}
}

proc isTrue {optionValue} {
	switch [string tolower $optionValue] {
		true -
		t -
		yes -
		y -
		on -
		o -
		1 {
			return 1
		}
		default {
			return 0
		}
	}
}

proc prefixTildeWithSlash {path} {
	if {[regexp "^~" $path]} {
		regsub "~" $path "/$" result
		return $result
	} else {
		return $path
	}
}

# Presently unimplemented.
#
#proc processTildes {
	#global absoluteSnippetsDocumentRoot
	#global absoluteSnippetsPath
	#global filePrefix
	#global fullTclPath
#}

proc removeTrailingSlash {path} {
	if {[regexp "/$" $path]} {
		regsub "/$" $path "" result
		return $result
	} else {
		return $path
	}
}

proc standardizeResponses {} {
	global absoluteSnippetsPath
	global filePrefix
	global fullTclPath
	set absoluteSnippetsPath [removeTrailingSlash $absoluteSnippetsPath]
	set filePrefix [addTrailingSlash $filePrefix]
}

proc substitute {filename tag value} {
	if { [ catch { open $filename r } readId ] } {
		puts stderr "Couldn't open file $filename for reading! Leaving\
			untouched."
		return
	} else {
		set fileContents [read $readId]
		regsub -all $tag $fileContents $value fileContents
		close $readId
		if { [ catch { open $filename w } writeId ] } {
			puts stderr "Couldn't open file $filename for writing! Leaving\
				untouched."
			return
		} else {
			puts -nonewline $writeId $fileContents
		}
		close $writeId
	}
}

proc upgrade {} {
	global absoluteSnippetsDocumentRoot
	global absoluteSnippetsPath
	global documentURL
	global filePrefix
	global fullBaseURL
	global fullProgramName
	global fullTclPath
	global programMode
	global shouldUpdateHTML
	global shouldUpdatePrivacyPolicy
	puts -nonewline "\nUpgrading...\n"
	if {[isTrue $shouldUpdateHTML]} {
		exec cp "[removeTrailingSlash $filePrefix]/general/header"\
		  "[removeTrailingSlash $filePrefix]/general/header.bak"
		exec cp "[removeTrailingSlash $filePrefix]/general/footer"\
		  "[removeTrailingSlash $filePrefix]/general/footer.bak"
		exec cp "data/general/header" "[removeTrailingSlash\
		  $filePrefix]/general/header"
		exec cp "data/general/footer" "[removeTrailingSlash\
		  $filePrefix]/general/footer"
	}
	if {[isTrue $shouldUpdatePrivacyPolicy]} {
		exec cp "htdocs/privacy.html" "[removeTrailingSlash\
		  $absoluteSnippetsDocumentRoot]/privacy.html"
		substitute "$absoluteSnippetsDocumentRoot/privacy.html" "DOCUMENT_URL"\
		  $documentURL
	}
	if {![file exists "[removeTrailingSlash\
	  $absoluteSnippetsDocumentRoot]/wideshadow.gif"]} {
		exec cp "htdocs/wideshadow.gif" "[removeTrailingSlash\
		  $absoluteSnippetsDocumentRoot]/wideshadow.gif"
	}
	if {![file exists "[removeTrailingSlash $filePrefix]/general/logout"]} {
		exec cp "data/general/logout" "[removeTrailingSlash\
		  $filePrefix]/general/logout"
		substitute "[removeTrailingSlash $filePrefix]/general/logout"\
		  "DOCUMENT_URL" $documentURL
		substitute "[removeTrailingSlash $filePrefix]/general/logout"\
		  "FULL_BASE_URL" $fullBaseURL
	}
	substitute "[removeTrailingSlash $filePrefix]/general/header"\
	  "DOCUMENT_URL" $documentURL
	exec cp $programMode $absoluteSnippetsPath
	exec chmod 600 $absoluteSnippetsPath
	substitute "$absoluteSnippetsPath" "FULL_TCL_PATH" "$fullTclPath"
	substitute "$absoluteSnippetsPath" "CONFIG_FILENAME"\
		"[removeTrailingSlash $filePrefix]/general/config"
	exec chmod 755 $absoluteSnippetsPath
	puts -nonewline \
"\nThe upgrade is complete.  Further information about $fullProgramName is\
\navailable in the README file.  If you'd like to know how to get the best out\
\nof $fullProgramName, please read it.\
\n"
	switch $programMode {
		snippets {
			puts -nonewline\
"\n\
\nHappy snipping!\
\n\
\n"
		}
		MagicNotebook {
		puts -nonewline "\nThank you for using the Magic Notebook!\n\n"
		}
		sidebar -
		default {
			puts -nonewline "\n\n"
		}
	}
}

init
interview
standardizeResponses
upgrade
